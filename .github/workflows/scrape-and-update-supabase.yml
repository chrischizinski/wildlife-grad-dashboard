name: Scrape Jobs and Update Supabase

on:
  schedule:
    # Run every Monday at 9 AM UTC (adjust to your timezone)
    - cron: "0 4 * * 0"
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [main, add-github-workflows]
    paths:
      - "src/wildlife_grad/scraper/wildlife_job_scraper.py"
      - "scripts/populate_supabase.py"
permissions:
  contents: write

jobs:
  scrape-and-update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Chrome dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg unzip
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install supabase python-dotenv

      - name: Check for existing data (determines scrape mode)
        id: check_data
        run: |
          # TEMPORARY: Force comprehensive scrape for testing Supabase restoration
          echo "mode=comprehensive" >> $GITHUB_OUTPUT
          echo "🔄 FORCING COMPREHENSIVE scrape for Supabase restoration test (All positions)"
          echo "⚠️ This will be reverted to incremental mode after successful test"

      - name: Scrape wildlife jobs
        run: |
          echo "Starting job scraping in ${{ steps.check_data.outputs.mode }} mode..."
          # TEMPORARY: Force comprehensive mode with --all-time flag
          python3 -m src.wildlife_grad.scraper.wildlife_job_scraper --all-time
          echo "✅ Comprehensive scrape completed - graduate positions from all time periods collected"

      - name: Debug filesystem and verify files
        run: |
          echo "=== Debugging filesystem ==="
          echo "Current working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Scripts directory contents:"
          ls -la scripts/ || echo "Scripts directory not found"
          echo "Python version: $(python3 --version)"
          echo "Which python3: $(which python3)"

      - name: Update Supabase database (append new data)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          echo "Updating Supabase database with new data..."
          echo "Mode: ${{ steps.check_data.outputs.mode }}"
          if [ -f "scripts/populate_supabase.py" ]; then
            python3 scripts/populate_supabase.py
          else
            echo "ERROR: scripts/populate_supabase.py not found!"
            echo "Available files in scripts/:"
            ls -la scripts/ || echo "Scripts directory does not exist"
            exit 1
          fi

      - name: Generate dashboard data
        run: |
          echo "Generating dashboard analytics..."
          python3 scripts/generate_dashboard_analytics.py

      - name: Copy data files to web dashboard directory
        run: |
          echo "Copying data files for GitHub Pages deployment..."
          cp data/processed/verified_graduate_assistantships.json web/data/
          cp data/enhanced_data.json web/data/
          cp data/historical_positions.json web/data/
          echo "Data files copied successfully"

      - name: Archive data
        run: |
          timestamp=$(date +%Y%m%d_%H%M%S)
          mkdir -p data/archive
          cp data/enhanced_data.json "data/archive/enhanced_${timestamp}.json"
          cp data/historical_positions.json "data/archive/historical_${timestamp}.json"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git fetch origin
          git add data/
          git add web/data/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Automated job data update $(date '+%Y-%m-%d %H:%M:%S')"
            git pull --rebase --strategy-option=theirs origin main
            git push origin main
          fi

      - name: Workflow summary
        run: |
          echo "## Scraping Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f "data/enhanced_data.json" ]; then
            total_jobs=$(jq '.positions | length' data/enhanced_data.json)
            grad_jobs=$(jq '.positions | map(select((.is_graduate_position == true) or (.position_type == "Graduate"))) | length' data/enhanced_data.json)
            echo "- **Total positions**: $total_jobs" >> $GITHUB_STEP_SUMMARY
            echo "- **Graduate positions**: $grad_jobs" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Supabase updated**: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Dashboard refreshed**: ✅" >> $GITHUB_STEP_SUMMARY
